<%

var log = new Log();
var selfReg = require('/controllers/user-registration/userRegistrationClient.jag');

var constants = require("../../util/constants.jag");
var util = require("../../util/utility.jag");
var i18n = util.initI18N();

function edit(){
	var messages = i18n.localize("messages");
    try{
        var claim = constants.DEFAULT_CLAIM_URL;
        if(session.get('openid') != null){
            claim = constants.OPENID_REG_CLAIM_URL;
        }


        var req =  <xsd:addUser xmlns:xsd="http://org.apache.axis2/xsd" xmlns:xsd1="http://dto.registration.user.identity.carbon.wso2.org/xsd">
                           <xsd:user>
                              <xsd1:openID></xsd1:openID>
                              <xsd1:password></xsd1:password>
                           </xsd:user>
                        </xsd:addUser>;

        var userName =  <xsd1:userName xmlns:xsd1="http://dto.registration.user.identity.carbon.wso2.org/xsd"></xsd1:userName>;

        var domain = request.getParameter("domain");
        var userNameVal = request.getParameter("userName");
        var pwd = request.getParameter("pwd");
        var retypePwd = request.getParameter("retypePwd");

        if(pwd != retypePwd){
			response.sendRedirect("../../landing.jag?e=1&error=password_doesnt_match" );
			return;
        }

        var regs = session.get('pwdReg');
        var validPwd = true;
        for each(var reg in regs){
            if(reg.domainName === domain){

                var regex = new RegExp(reg.regEx);
                var valid = regex.test(pwd);
                if (value != '' && !valid) {
                    validPwd = false;
                    break;
                }
            }
        }

        if(!validPwd){
			response.sendRedirect("../../landing.jag?e=1&error=" + messages["pwd"] + " " + messages["not_valid"] );
			return;
        }

        req.*::user.*::openID.setChildren(session.get("openIdURL"));
        req.*::user.*::password.setChildren(pwd);
        userName.setChildren(domain + "/" + userNameVal);



        var fieldValues = selfReg.readUserFieldsForUserRegistration(claim, true);
        fieldValues = fieldValues.*::['return'];

        log.debug(fieldValues);
        for each (var f in fieldValues){

           log.debug(f);
           var paramName = f.*::['claimUri'].text().toString();
           var value = request.getParameter(paramName);

           log.debug(value);
           var isValid = validate(value, f);
           if(!isValid){
           		response.sendRedirect("../../landing.jag?e=1&error=" + value + " " + messages["not_valid"] );
               	return;
           }

           var fieldValue = <xsd1:userFields xmlns:xsd1="http://dto.registration.user.identity.carbon.wso2.org/xsd">
               <xsd1:claimUri></xsd1:claimUri>
               <xsd1:defaultValue></xsd1:defaultValue>
               <xsd1:displayOrder></xsd1:displayOrder>
               <xsd1:fieldName></xsd1:fieldName>
               <xsd1:fieldValue></xsd1:fieldValue>
               <xsd1:inputValues></xsd1:inputValues>
               <xsd1:maxLength></xsd1:maxLength>
               <xsd1:minLength></xsd1:minLength>
               <xsd1:regEx></xsd1:regEx>
               <xsd1:required></xsd1:required>
            </xsd1:userFields>;

           fieldValue.*::claimUri.setChildren(f.*::['claimUri'].text());
           fieldValue.*::defaultValue.setChildren(f.*::['defaultValue'].text());
           fieldValue.*::displayOrder.setChildren(f.*::['displayOrder'].text());
           fieldValue.*::fieldName.setChildren(f.*::['fieldName'].text());

           fieldValue.*::inputValues.setChildren(f.*::['inputValues'].text());
           fieldValue.*::maxLength.setChildren(f.*::['maxLength'].text());
           fieldValue.*::minLength.setChildren(f.*::['minLength'].text());
           fieldValue.*::regEx.setChildren(f.*::['regEx'].text());
           fieldValue.*::required.setChildren(f.*::['required'].text());

           if(value != null && value.length > 0){
               fieldValue.*::fieldValue.setChildren(value);
           }

           req.*::['user'].appendChild(fieldValue);
       }
       req.*::['user'].appendChild(userName);
       selfReg.addUser(req);
       response.sendRedirect("../../login.jag?");

    }catch(e){
        log.error(e);
        response.sendRedirect("index.jag?e=1&error=service_invok_error");

    }
}

function validate(value, f){
    if(f.*::['required'].text().toString() === "true"){
        if(value == null || value.length <= 0){
            return false;
        }
    }

    if(f.*::['regEx'].text().toString() != null){
        var reg = new RegExp(f.*::['regEx'].text().toString());
        var valid = reg.test(value);
        if (value != '' && !valid) {
            return false;
        }

    }
    return true;
}

edit();

%>
