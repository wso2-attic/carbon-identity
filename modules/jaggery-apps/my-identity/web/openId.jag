<%
var log = new Log();

var caramel = require('caramel');
var identityClient = require('/controllers/identity-management/IdentityProviderServiceClient.jag');
var util = require("util/utility.jag");

include("util/constants.jag");

var i18n = util.initI18N();

function doRender(){

	try{

	    try{
            require('authenticationHandler.jag');

        }catch(e){
            log.error(e);
            response.sendRedirect("login.jag?e=1&error=AuthenticationFail");
            return;
        }

		
		var userName = session.get(LOGGED_IN_USER);
		var openIdSet = identityClient.getAllOpenIds(userName);
		var primaryOpenId = identityClient.getPrimaryOpenID(userName);
		
		
		log.debug(openIdSet['return']);
		
		var openIdJson = [];
		if(openIdSet['return'] != null && openIdSet['return'].length == null){
		    openIdJson.push(openIdSet['return']);
		}else{
		    openIdJson = openIdSet['return'];
		}
		
		
	    var openIdJsonStr = stringify(openIdJson);
	    var openIdJsonArray = [];
	    if(openIdJsonStr.indexOf(",") < 0){
	        //Only one openid exists
	    	openIdJsonArray.push(openIdJson)
	    }else{
	        //this is an array. So no need to do any
	    	openIdJsonArray = openIdJson;
	    }
	    
	    primaryOpenId = primaryOpenId.return;
	    var openIdJsons = [];
	    for each( var id in openIdJsonArray){
	    		var obj = {};
				if(primaryOpenId === id){
					obj['primary'] = true;
				}	    		
	    		obj['id'] = id;
	    		openIdJsons.push(obj);
	    }

		
		log.info(openIdJsons);
		
		caramel.render({
		    openIds: openIdJsons,
		    messages : i18n.localize("messages"),
		    error: util.getSuccessErrorJson(request, i18n)
		    
		});
	}catch(e){
		log.error(e);
        response.sendRedirect("index.jag?e=1&error=service_invok_error");
		
	}
}

doRender();	
%>