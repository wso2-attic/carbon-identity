<%
var log = new Log();

var caramel = require('caramel');
var selfReg = require('/controllers/user-registration/userRegistrationClient.jag');
var util = require("util/utility.jag");
var constants = require("util/constants.jag");

var claim = constants.DEFAULT_CLAIM_URL;
if(session.get('openid') != null){
    claim = constants.OPENID_REG_CLAIM_URL;
}

function doRender(){
	try{

	    try{
            require('authenticationHandler.jag');

        }catch(e){
            log.error(e);
            response.sendRedirect("login.jag?e=1&error=AuthenticationFail");
            return;
        }


		var fieldValues = selfReg.readUserFieldsForUserRegistration(claim);
		var pwdRegexps = selfReg.getPasswordRegularExpressions();
		
		var i18n = util.initI18N();
		
		var json = {};
		json.fieldValues = fieldValues;
		var pwdObjs = stringify(pwdRegexps['return']);

		if(pwdObjs.indexOf("[{") < 0){
            var pwdObjsAray = [];
            pwdObjsAray.push(pwdRegexps['return']);
            pwdRegexps['return'] = pwdObjsAray;
		}
		json.pwdRegexps = pwdRegexps;
		
		session.put("pwdReg", pwdRegexps['return']);
		log.debug(session.get('pwdReg'));
		
		caramel.render({
		    regData: json,
		    messages : i18n.localize("messages"),
		    error: util.getSuccessErrorJson(request, i18n)
		    
		});
	}catch(e){
		log.error(e);
        response.sendRedirect("index.jag?e=1&error=service_invok_error");
		
	}
}

doRender();
%>