<%
var caramel = require('caramel');
var util = require("util/utility.jag");
include("util/constants.jag");

var i18n = util.initI18N();

var lg = new Log();


function login(){
	setServerURL();
	initAuthenticationProtocol();
	
	var user = session.get(LOGGED_IN_USER);	
    if(user == null){
    	
    	if(application.get(SAML_ENABLED) === true){
    		//redirect to the saml idp
    		response.sendRedirect("samlsso.jag?login=true");
    		return;
    	}else{
        
            var header = util.generateHeader(false, i18n);
            
            header = parse(stringify(header));        
            session.put(USER_HEADER, header);

            caramel.render({
    		    messages : i18n.localize("messages"),
            	error: util.getSuccessErrorJson(request, i18n)
            	});
    	}
    }
    else{
        var error = request.getParameter("e");
        if(error != null && error.length > 0){
            error = "e=1&error=" + request.getParameter("error");
        }
        error = (error == null) ? "" : error;
        response.sendRedirect("index.jag?" + error);
    }
}


function setServerURL(){
	
	var serverUrl = stringify(application.get(SERVER_URL));
	if(serverUrl === 'null' || serverUrl == null || serverUrl.length <= 0){
		//Server URL is not specified in the jaggery.conf, therefore using the service url mentioned in the carbon.conf
		//lg.info("we are here 0");
		var carbon = require('carbon');
		//lg.info("we are here 1");
		var serverConfigService = carbon.server.osgiService('org.wso2.carbon.base.api.ServerConfigurationService');
		var configContextService = carbon.server.osgiService('org.wso2.carbon.utils.ConfigurationContextService');
		
		var configContext = configContextService.getServerConfigContext();

		
		var ServerConfiguration = Packages.org.wso2.carbon.base.ServerConfiguration;
	    var mgtTransport = ServerConfiguration.getInstance().getFirstProperty("ManagementTransport");
	    if (mgtTransport == null || mgtTransport.startsWith("${")) {
	    	mgtTransport = "https";
	    }
	    
	    var carbonMgtParam = "${carbon.management.port}";
	    var carbonContext = "${carbon.context}";
	    
		var server = serverConfigService.getFirstProperty("ServerURL");
		var hostName = serverConfigService.getFirstProperty("HostName");
		var mgtHostName = serverConfigService.getFirstProperty("MgtHostName");
		
		
		var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
	   var httpsPort =
	                CarbonUtils.getTransportPort(configContext, mgtTransport) + "";		
	                
		application.put("mgtHostName", mgtHostName);		
		application.put("mgtTransport", mgtTransport);
		
	   application.put("httpsPort", httpsPort);
		
		if(server.indexOf("local:/") == 0){
			server = mgtTransport + "://"+ hostName +":" + carbonMgtParam + carbonContext + "/services"
		}

	    var serverUrl = server;
		 if (serverUrl.indexOf(carbonMgtParam) != -1) {
	        serverUrl = serverUrl.replace(carbonMgtParam, httpsPort);
	    }
	    if (serverUrl.indexOf(carbonContext) != -1) {
	        var context = ServerConfiguration.getInstance().getFirstProperty("WebContextRoot");
	        if (context.equals("/")) {
	            context = "";
	        }
	        serverUrl = serverUrl.replace(carbonContext, context);
	    }
	    
		
	    if(serverUrl.lastIndexOf('/') === (serverUrl.length - 1)){
	    	serverUrl = serverUrl.substring(0, serverUrl.length - 1);
	    }
		application.put(SERVER_URL, serverUrl);
		lg.info("connecting to " + serverUrl);

	}
		
}

function initAuthenticationProtocol(){
	
	if(application.get(AUTH_CONFIG_PARSED)){
		return;
	}
	var authConfig = readFile("/authentication/auth_config.json");
	if(authConfig.EnableSAMLSSOLogin === "true"){
	

			
		//If only saml enabled, we do initialize the saml flow. 
		var samlConfig = authConfig.saml_config;
		var properties = {};
		
		var sys = Packages.java.lang.System;
		var carbonHome = sys.getProperty("carbon.home");
		var serverUrl = getServerUrl();
		var server = stringify(serverUrl);
		if(server.indexOf("[") > -1 || server.indexOf("]") > -1){
			serverUrl = serverUrl[0];
		}
		lg.info(samlConfig);
		lg.info(serverUrl);
		
		var mgtHostName = application.get("mgtHostName");		
		var mgtTransport =  application.get("mgtTransport");
	   var httpsPort = application.get("httpsPort");
		
		for (var prop in samlConfig){
			if (samlConfig.hasOwnProperty(prop)) {
				var value = samlConfig[prop];
				if(prop === "SAML.KeyStore"){
					value = value.replace("{carbon.home}", carbonHome);
				}
				if(prop === "SAML.IdPUrl"){
					if(prop.indexOf("http") > -1){
						value = value;
					}else{
						value = mgtTransport + "://" + mgtHostName + ":" + httpsPort + "/" + (value);
					}

				}
				lg.info(value);
				properties[prop] = value;
			}
		}
		
		application.put(SAML_ENABLED, true);
		application.put(SAML_PROPERTIES, properties);
		
		var samlLogin = "<sso:login xmlns:sso=\"http://sso.saml2.authenticator.identity.carbon.wso2.org\" xmlns:xsd=\"http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd\">\n" +
						"<sso:authDto>\n" +
							"<xsd:response>{0}</xsd:response>\n" +
						"</sso:authDto>\n" + 
						"</sso:login>";
		
		application.put("urn:login", samlLogin);


	}
	
	application.put(AUTH_CONFIG_PARSED, true);
	
}

login();

%>