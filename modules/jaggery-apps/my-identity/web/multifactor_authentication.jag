<%
var log = new Log();

var caramel = require('caramel');
var xmppClient = require('/controllers/multy_factor_auth/xmppConfigClient.jag');
var util = require("util/utility.jag");
include("util/constants.jag");

function doRender(){

	try{

	    try{
            require('authenticationHandler.jag');

        }catch(e){
            log.error(e);
            response.sendRedirect("login.jag?e=1&error=AuthenticationFail");
            return;
        }

	
		var userName = session.get(LOGGED_IN_USER);
		var userIM  = xmppClient.getUserIM(userName);
		var defaultIM = "";
		log.info(userIM);
		if(userIM['return'] != null){
		    log.debug(userIM);
		    userIM = userIM['return'].split("@");
		    if(userIM.length > 1 && userIM[1] === "gmail.com"){
		        defaultIM = userIM[0] + "@" + userIM[1];
		    }
		}
		
		var json = {};
		json['defaultIM'] = defaultIM;
		var xmppConfigExists = xmppClient.isXMPPSettingsAvailable(userName);
		
		if(xmppConfigExists['return'] === "true"){
		    //XMPP configuration already exists
		    var xmppConfig = xmppClient.getXmppSettings(userName);
		    json['configExists'] = true;
		    json['operation'] = "e";
		    json['config'] = xmppConfig['return'];
		    log.debug(xmppConfig);
		}
		
		var i18n = session.get("i18n")
		if(i18n == null){
		    i18n = require("i18n");
		    i18n.init(request, "/" );
		
		    session.put("i18n", i18n);
		}
		
		caramel.render({
		    xmppConfig: json,
		    messages : i18n.localize("messages"),
		    error: util.getSuccessErrorJson(request, i18n)
		    
		});
	}catch(e){
		log.error(e);
        response.sendRedirect("../../index.jag?e=1&error=" + e);
		
	}
}

doRender();
%>